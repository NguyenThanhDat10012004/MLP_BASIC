# -*- coding: utf-8 -*-
"""A_ImgClf_MLP_ReLU.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rdbE9DMhE7ubNfDKhHUFd9sJwOmoc3ms

## **0. Download dataset**
**Note:** If you can't download using gdown due to limited number of downloads, please download it manually and upload it to your drive, then copy it from the drive to colab.
```python
from google.colab import drive

drive.mount('/content/drive')
!cp /path/to/dataset/on/your/drive .
```
"""

# https://drive.google.com/file/d/1GaTMURqIQTjtalbNVAyVgPIEis21A0r8/view?usp=drive_link
!gdown --id 1GaTMURqIQTjtalbNVAyVgPIEis21A0r8

!unzip -q './FER-2013.zip'

"""## **1. Import libraries**"""

import cv2
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
from torchvision.transforms import Resize
from torchvision.io import read_image

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
random_state = 59
np.random.seed(random_state)
torch.manual_seed(random_state)
if torch.cuda.is_available():
    torch.cuda.manual_seed(random_state)

"""## **2. Get classes**"""

train_dir = '/content/train'
test_dir = '/content/test'

classes = os.listdir(train_dir)

label2idx = {cls:idx for idx, cls in enumerate(classes)}
idx2label = {idx:cls  for cls, idx in label2idx.items()}

"""## **3. Create PyTorch DataLoader**"""

test_img_path = '/content/train/angry/Training_10118481.jpg'
img = cv2.imread(test_img_path)
img_height, img_width = (128, 128)
print(f'Image height: {img_height}')
print(f'Image width: {img_width}')

class ImageDataset(Dataset):
    def __init__(self, img_dir, norm, label2idx, split='train', train_ratio=0.8):
        # Khởi tạo các tham số và thuộc tính
        self.resize = Resize((img_height, img_width))  # Resize các ảnh về kích thước chuẩn
        self.norm = norm  # Quyết định có chuẩn hóa ảnh hay không
        self.split = split  # 'train', 'val', hoặc 'test'
        self.train_ratio = train_ratio  # Tỉ lệ huấn luyện cho split 'train' và 'val'
        self.img_dir = img_dir  # Đường dẫn đến thư mục ảnh
        self.label2idx = label2idx  # Bảng ánh xạ nhãn thành chỉ số
        self.img_paths, self.img_labels = self.read_img_files()  # Đọc danh sách ảnh và nhãn

        # Tách dữ liệu thành tập huấn luyện và kiểm tra nếu là 'train' hoặc 'val'
        if split in ['train', 'val'] and 'train' in img_dir.lower():
            train_data, val_data = train_test_split(
                list(zip(self.img_paths, self.img_labels)),
                train_size=train_ratio,
                random_state=random_state,
                stratify=self.img_labels  # Duy trì phân bổ nhãn trong cả tập huấn luyện và kiểm tra
            )

            if split == 'train':
                self.img_paths, self.img_labels = zip(*train_data)
            elif split == 'val':
                self.img_paths, self.img_labels = zip(*val_data)

    def read_img_files(self):
        # Đọc tất cả ảnh và nhãn từ thư mục
        img_paths = []
        img_labels = []
        for cls in self.label2idx.keys():
            for img in os.listdir(os.path.join(self.img_dir, cls)):
                img_paths.append(os.path.join(self.img_dir, cls, img))
                img_labels.append(cls)
        return img_paths, img_labels

    def __len__(self):
        # Trả về số lượng ảnh trong dataset
        return len(self.img_paths)

    def __getitem__(self, idx):
        # Trả về ảnh và nhãn tại chỉ số idx
        img_path = self.img_paths[idx]
        cls = self.img_labels[idx]
        img = self.resize(read_image(img_path))  # Đọc và thay đổi kích thước ảnh
        img = img.type(torch.float32)  # Đảm bảo kiểu dữ liệu của ảnh là float32
        label = self.label2idx[cls]  # Chuyển nhãn thành chỉ số

        # Nếu cần chuẩn hóa, thực hiện
        if self.norm:
            img = (img / 127.5) - 1  # Chuẩn hóa giá trị ảnh về khoảng [-1, 1]

        return img, label

# Đặt batch size cho DataLoader
batch_size = 256

# Tạo dataset và DataLoader cho tập huấn luyện
train_dataset = ImageDataset(train_dir, True, label2idx, split='train')
train_loader = DataLoader(
    train_dataset,
    batch_size=batch_size,
    shuffle=True  # Xáo trộn dữ liệu trong mỗi epoch để tăng tính ngẫu nhiên
)

# Tạo dataset và DataLoader cho tập kiểm tra (validation)
val_dataset = ImageDataset(train_dir, True, label2idx, split='val')
val_loader = DataLoader(
    val_dataset,
    batch_size=batch_size,
    shuffle=False  # Không xáo trộn dữ liệu khi kiểm tra
)

# Tạo dataset và DataLoader cho tập kiểm tra cuối (test)
test_dataset = ImageDataset(test_dir, True, label2idx, split='test')
test_loader = DataLoader(
    test_dataset,
    batch_size=batch_size,
    shuffle=False  # Không xáo trộn dữ liệu khi kiểm tra
)

import matplotlib.pyplot as plt
import numpy as np

# Lấy một batch hình ảnh và nhãn từ train_loader
image_batch, label_batch = next(iter(train_loader))

# Vẽ các ảnh trong một grid 3x3
plt.figure(figsize=(10, 10))
for i in range(9):
    ax = plt.subplot(3, 3, i + 1)

    # Lấy min và max giá trị của ảnh để chuẩn hóa việc hiển thị
    minv = image_batch[i].numpy().min()
    maxv = image_batch[i].numpy().max()

    # Hiển thị ảnh với phạm vi giá trị từ min đến max, sử dụng cmap 'gray'
    plt.imshow(np.squeeze(image_batch[i].numpy()), vmin=minv, vmax=maxv, cmap="gray")

    # Lấy nhãn của ảnh
    label = label_batch[i]

    # Hiển thị tiêu đề là tên nhãn
    plt.title(idx2label[label.item()])

    # Tắt hiển thị các trục (axes)
    plt.axis("off")

plt.show()

"""## **4. Build MLP network**"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class MLP(nn.Module):
    def __init__(self, input_dims, hidden_dims, output_dims):
        super(MLP, self).__init__()
        # Định nghĩa các lớp tuyến tính (fully connected layers)
        self.linear1 = nn.Linear(input_dims, hidden_dims * 4)  # Lớp tuyến tính đầu tiên
        self.linear2 = nn.Linear(hidden_dims * 4, hidden_dims * 2)  # Lớp tuyến tính thứ hai
        self.linear3 = nn.Linear(hidden_dims * 2, hidden_dims)  # Lớp tuyến tính thứ ba
        self.linear4 = nn.Linear(hidden_dims, hidden_dims)  # Lớp tuyến tính thứ ba
        self.output = nn.Linear(hidden_dims, output_dims)  # Lớp đầu ra

    def forward(self, x):
        # Chuyển đổi ảnh 2D thành một vector 1D
        x = nn.Flatten()(x)  # Làm phẳng ảnh thành vector

        # Truyền dữ liệu qua các lớp tuyến tính và hàm kích hoạt ReLU
        x = self.linear1(x)
        x = F.gelu(x)
        x = self.linear2(x)
        x = F.gelu(x)
        x = self.linear3(x)
        x = F.gelu(x)
        x = self.linear4(x)
        x = F.gelu(x)
        x = self.linear4(x)
        x = F.gelu(x)

        # Tính toán đầu ra cuối cùng
        out = self.output(x)
        return out.squeeze(1)  # Loại bỏ chiều không cần thiết (thường là chiều 1)
input_dims = img_height * img_width
output_dims = len(classes)
hidden_dims = 64
lr = 1e-2  # Learning rate là 0.01
model = MLP(input_dims=input_dims, hidden_dims=hidden_dims, output_dims=output_dims).to(device)

import torch
import torch.nn as nn

# Định nghĩa hàm mất mát (loss function) cho bài toán phân loại
criterion = nn.CrossEntropyLoss()

# Tạo optimizer sử dụng Stochastic Gradient Descent (SGD)
optimizer = torch.optim.SGD(model.parameters(), lr=lr)

"""## **5. Training**"""

import torch

def compute_accuracy(y_hat, y_true):
    # Lấy chỉ số của lớp có xác suất cao nhất từ y_hat (dự đoán của mô hình)
    _, y_hat = torch.max(y_hat, dim=1)

    # Tính số lượng dự đoán chính xác
    correct = (y_hat == y_true).sum().item()

    # Tính độ chính xác (accuracy)
    accuracy = correct / len(y_true)

    return accuracy

# Số lượng epochs
epochs = 100
train_losses = []
val_losses = []
train_accs = []
val_accs = []

# Early stopping parameters
patience = 5  # Số epoch cho phép không cải thiện trước khi dừng
best_val_loss = float('inf')  # Mất mát tốt nhất
patience_counter = 0  # Đếm số epoch không cải thiện

for epoch in range(epochs):
    train_loss = 0.0
    train_target = []
    train_predict = []

    # Đặt mô hình vào chế độ huấn luyện
    model.train()

    # Duyệt qua tất cả các batch trong tập huấn luyện
    for X_samples, y_samples in train_loader:
        X_samples = X_samples.to(device)
        y_samples = y_samples.to(device)

        optimizer.zero_grad()  # Đặt lại gradient về 0

        # Tính toán đầu ra từ mô hình
        outputs = model(X_samples)

        # Tính toán hàm mất mát
        loss = criterion(outputs, y_samples)

        # Lan truyền ngược gradient và cập nhật trọng số
        loss.backward()
        optimizer.step()

        # Cộng dồn mất mát
        train_loss += loss.item()

        # Lưu dự đoán và nhãn cho tính độ chính xác
        train_predict.append(outputs.detach().cpu())
        train_target.append(y_samples.cpu())

    train_loss /= len(train_loader)
    train_losses.append(train_loss)

    # Nối tất cả dự đoán và nhãn
    train_predict = torch.cat(train_predict)
    train_target = torch.cat(train_target)

    # Tính độ chính xác cho tập huấn luyện
    train_acc = compute_accuracy(train_predict, train_target)
    train_accs.append(train_acc)

    # Kiểm tra mô hình trên tập kiểm tra
    val_loss = 0.0
    val_target = []
    val_predict = []

    model.eval()
    with torch.no_grad():
        for X_samples, y_samples in val_loader:
            X_samples = X_samples.to(device)
            y_samples = y_samples.to(device)

            # Dự đoán đầu ra cho tập kiểm tra
            outputs = model(X_samples)

            # Tính toán mất mát cho tập kiểm tra
            val_loss += criterion(outputs, y_samples).item()

            # Lưu dự đoán và nhãn cho kiểm tra
            val_predict.append(outputs.cpu())
            val_target.append(y_samples.cpu())

    val_loss /= len(val_loader)
    val_losses.append(val_loss)

    # Nối tất cả dự đoán và nhãn
    val_predict = torch.cat(val_predict)
    val_target = torch.cat(val_target)

    # Tính độ chính xác cho tập kiểm tra
    val_acc = compute_accuracy(val_predict, val_target)
    val_accs.append(val_acc)

    # In kết quả sau mỗi epoch
    print(f'\nEPOCH {epoch + 1}: Training loss: {train_loss:.3f}\tValidation loss: {val_loss:.3f}')

    # Kiểm tra xem có cải thiện mất mát trên tập kiểm tra không
    if val_loss < best_val_loss:
        best_val_loss = val_loss  # Cập nhật mất mát tốt nhất
        patience_counter = 0  # Đặt lại counter nếu mất mát giảm
    else:
        patience_counter += 1  # Nếu mất mát không giảm, tăng counter

    # Kiểm tra xem có dừng huấn luyện không
    if patience_counter >= patience:
        print(f'Early stopping triggered after {epoch + 1} epochs.')
        break

fig, ax = plt.subplots(2, 2, figsize=(12, 10))
ax[0, 0].plot(train_losses, color='green')
ax[0, 0].set(xlabel='Epoch', ylabel='Loss')
ax[0, 0].set_title('Training Loss')

ax[0, 1].plot(val_losses, color='orange')
ax[0, 1].set(xlabel='Epoch', ylabel='Loss')
ax[0, 1].set_title('Validation Loss')

ax[1, 0].plot(train_accs, color='green')
ax[1, 0].set(xlabel='Epoch', ylabel='Accuracy')
ax[1, 0].set_title('Training Accuracy')

ax[1, 1].plot(val_accs, color='orange')
ax[1, 1].set(xlabel='Epoch', ylabel='Accuracy')
ax[1, 1].set_title('Validation Accuracy')

plt.show()

"""## **7. Evaluation**"""

val_target = []
val_predict = []
model.eval()
with torch.no_grad():
    for X_samples, y_samples in val_loader:
        X_samples = X_samples.to(device)
        y_samples = y_samples.to(device)
        outputs = model(X_samples)

        val_predict.append(outputs.cpu())
        val_target.append(y_samples.cpu())

    val_predict = torch.cat(val_predict)
    val_target = torch.cat(val_target)
    val_acc = compute_accuracy(val_predict, val_target)

    print('Evaluation on val set:')
    print(f'Accuracy: {val_acc}')